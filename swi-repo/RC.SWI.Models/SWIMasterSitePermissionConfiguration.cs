// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RC.SWI.Entities
{

    // SWIMasterSitePermissions
    public partial class SWIMasterSitePermissionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SWIMasterSitePermission>
    {
        public SWIMasterSitePermissionConfiguration()
            : this("swi")
        {
        }

        public SWIMasterSitePermissionConfiguration(string schema)
        {
            ToTable("SWIMasterSitePermissions", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SWIMasterId).HasColumnName(@"SWIMasterId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.SiteId).HasColumnName(@"SiteId").HasColumnType("int").IsRequired();
            Property(x => x.GrantedBy).HasColumnName(@"GrantedBy").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
            Property(x => x.GrantedOn).HasColumnName(@"GrantedOn").HasColumnType("datetime2").IsRequired();
            Property(x => x.IsOwner).HasColumnName(@"IsOwner").HasColumnType("bit").IsRequired();
            Property(x => x.Notes).HasColumnName(@"Notes").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.CanRead).HasColumnName(@"CanRead").HasColumnType("bit").IsRequired();
            Property(x => x.CanAuthor).HasColumnName(@"CanAuthor").HasColumnType("bit").IsRequired();
            Property(x => x.CanManage).HasColumnName(@"CanManage").HasColumnType("bit").IsRequired();

            // Foreign keys
            HasRequired(a => a.Site).WithMany(b => b.SWIMasterSitePermissions).HasForeignKey(c => c.SiteId).WillCascadeOnDelete(false); // FK_SWIMasterSitePermissions_Sites
            HasRequired(a => a.SWIMaster).WithMany(b => b.SWIMasterSitePermissions).HasForeignKey(c => c.SWIMasterId).WillCascadeOnDelete(false); // FK_SWIMasterSitePermissions_SWIMasters
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
