// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RC.SWI.Entities
{

    // RolePermissions
    public partial class RolePermissionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RolePermission>
    {
        public RolePermissionConfiguration()
            : this("security")
        {
        }

        public RolePermissionConfiguration(string schema)
        {
            ToTable("RolePermissions", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("int").IsRequired();
            Property(x => x.PermissionId).HasColumnName(@"PermissionId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.Permission).WithMany(b => b.RolePermissions).HasForeignKey(c => c.PermissionId).WillCascadeOnDelete(false); // FK_RolePermissions_Permissions
            HasRequired(a => a.Role).WithMany(b => b.RolePermissions).HasForeignKey(c => c.RoleId).WillCascadeOnDelete(false); // FK_RolePermissions_Roles
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
