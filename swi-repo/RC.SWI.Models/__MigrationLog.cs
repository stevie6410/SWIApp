// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RC.SWI.Entities
{

    // __MigrationLog
    public partial class __MigrationLog
    {

        ///<summary>
        /// The unique identifier of a migration script file. This value is stored within the &lt;Migration /&gt; Xml fragment within the header of the file itself.    Note that it is possible for this value to repeat in the [__MigrationLog] table. In the case of programmable object scripts, a record will be inserted with a particular ID each time a change is made to the source file and subsequently deployed.    In the case of a migration, you may see the same [migration_id] repeated, but only in the scenario where the &quot;Mark As Deployed&quot; button/command has been run.
        ///</summary>
        public System.Guid migration_id { get; set; } // migration_id (Primary key)

        ///<summary>
        /// A SHA256 representation of the migration script file at the time of build.  This value is used to determine whether a migration has been changed since it was deployed. In the case of a programmable object script, a different checksum will cause the migration to be redeployed.  Note: if any variables have been specified as part of a deployment, this will not affect the checksum value.
        ///</summary>
        public string script_checksum { get; set; } // script_checksum (Primary key) (length: 64)

        ///<summary>
        /// The name of the migration script file on disk, at the time of build.  If Semantic Versioning has been enabled, then this value will contain the full relative path from the root of the project folder. If it is not enabled, then it will simply contain the filename itself.
        ///</summary>
        public string script_filename { get; set; } // script_filename (length: 255)

        ///<summary>
        /// The date/time that the migration finished executing. This value is populated using the SYSDATETIME function in SQL Server 2008+ or by using GETDATE in SQL Server 2005.
        ///</summary>
        public System.DateTime complete_dt { get; set; } // complete_dt (Primary key)

        ///<summary>
        /// The executing user at the time of deployment (populated using the SYSTEM_USER function).
        ///</summary>
        public string applied_by { get; set; } // applied_by (length: 100)

        ///<summary>
        /// This column contains a number of potential states:    0 - Marked As Deployed: The migration was not executed.  1- Deployed: The migration was executed successfully.  2- Imported: The migration was generated by importing from this DB.    &quot;Marked As Deployed&quot; and &quot;Imported&quot; are similar in that the migration was not executed on this database; it was was only marked as such to prevent it from executing during subsequent deployments.
        ///</summary>
        public byte deployed { get; set; } // deployed

        ///<summary>
        /// The semantic version that this migration was created under. In ReadyRoll projects, a folder can be given a version number, e.g. 1.0.0, and one or more migration scripts can be stored within that folder to provide logical grouping of related database changes.
        ///</summary>
        public string version { get; set; } // version (length: 255)

        ///<summary>
        /// If you have enabled SQLCMD Packaging in your ReadyRoll project, or if you are using Octopus Deploy, this will be the version number that your database package was stamped with at build-time.
        ///</summary>
        public string package_version { get; set; } // package_version (length: 255)

        ///<summary>
        /// If you are using Octopus Deploy, you can use the value in this column to look-up which release was responsible for deploying this migration.  If deploying via PowerShell, set the $ReleaseVersion variable to populate this column.  If deploying via Visual Studio, this column will always be NULL.
        ///</summary>
        public string release_version { get; set; } // release_version (length: 255)

        ///<summary>
        /// An auto-seeded numeric identifier that can be used to determine the order in which migrations were deployed.
        ///</summary>
        public int sequence_no { get; set; } // sequence_no

        public __MigrationLog()
        {
            deployed = 1;
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
