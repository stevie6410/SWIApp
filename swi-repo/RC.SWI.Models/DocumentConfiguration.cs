// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RC.SWI.Entities
{

    // Documents
    public partial class DocumentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Document>
    {
        public DocumentConfiguration()
            : this("dbo")
        {
        }

        public DocumentConfiguration(string schema)
        {
            ToTable("Documents", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.DocumentTypeId).HasColumnName(@"DocumentTypeId").HasColumnType("int").IsRequired();
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(255);
            Property(x => x.CreatedOn).HasColumnName(@"CreatedOn").HasColumnType("datetime2").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
            Property(x => x.AppVersion).HasColumnName(@"AppVersion").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.CheckedOut).HasColumnName(@"CheckedOut").HasColumnType("bit").IsRequired();
            Property(x => x.CheckedOutBy).HasColumnName(@"CheckedOutBy").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.CheckedOutOn).HasColumnName(@"CheckedOutOn").HasColumnType("datetime2").IsOptional();
            Property(x => x.DocumentFileId).HasColumnName(@"DocumentFileId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.DocumentFile).WithMany(b => b.Documents).HasForeignKey(c => c.DocumentFileId).WillCascadeOnDelete(false); // FK_Docs_Files
            HasRequired(a => a.DocumentType).WithMany(b => b.Documents).HasForeignKey(c => c.DocumentTypeId).WillCascadeOnDelete(false); // FK_Documents_DocumentTypes
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
