// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace RC.SWI.Entities
{

    // StandardTools
    public partial class StandardToolConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StandardTool>
    {
        public StandardToolConfiguration()
            : this("swi")
        {
        }

        public StandardToolConfiguration(string schema)
        {
            ToTable("StandardTools", schema);
            HasKey(x => new { x.Id, x.Name, x.Image, x.HasCarePoint });

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Image).HasColumnName(@"Image").HasColumnType("varchar(max)").IsRequired().IsUnicode(false).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.HasCarePoint).HasColumnName(@"HasCarePoint").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CarePoint).HasColumnName(@"CarePoint").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.SWIId).HasColumnName(@"SWIId").HasColumnType("uniqueidentifier").IsOptional();

            // Foreign keys
            HasOptional(a => a.SWIMaster).WithMany(b => b.StandardTools).HasForeignKey(c => c.SWIId).WillCascadeOnDelete(false); // FK_StandardTools_SWIMasters
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
